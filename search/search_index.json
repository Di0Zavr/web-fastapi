{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI backend application","text":""},{"location":"#_1","title":"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432","text":"<p>\u0421\u0435\u0440\u0433\u0435\u0435\u0432 \u0412\u0438\u043a\u0442\u043e\u0440 \u042e\u0440\u044c\u0435\u0432\u0438\u0447 WEB2.1</p>"},{"location":"LR1/about/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432.</p> </li> <li> <p>\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.).</p> </li> <li> <p>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447: \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438.</p> </li> <li> <p>\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438.</p> </li> </ul>"},{"location":"LR1/api/","title":"API","text":"<p>\u0414\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u0435\u043a\u044d\u043d\u0434 \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 FastAPI \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b API-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0432\u0441\u0435\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432\u044b\u0440\u0435\u0437\u043a\u0438 \u0438\u0437 Swagger \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p>"},{"location":"LR1/api/#_1","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":""},{"location":"LR1/api/#user","title":"User","text":""},{"location":"LR1/api/#hackathon","title":"Hackathon","text":""},{"location":"LR1/api/#team","title":"Team","text":""},{"location":"LR1/api/#task","title":"Task","text":""},{"location":"LR1/api/#solutionfix","title":"Solution/Fix","text":""},{"location":"LR1/auth/","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0411\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430, \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430, \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.</p> <pre><code>def get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef verify_password(password, hashed_password):\n    return pwd_context.verify(password, hashed_password)\n\ndef encode_token(user_id, role):\n    payload = {\n        \"exp\": datetime.datetime.now(datetime.UTC) + datetime.timedelta(days=30),\n        \"user_id\": user_id,\n        \"role\": role.value\n    }\n    return jwt.encode(payload=payload, key=secret, algorithm=\"HS256\")\n\ndef decode_token(token):\n    try:\n        payload = jwt.decode(jwt=token, key=secret, algorithms=\"HS256\")\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED, \n                detail=\"Expired Token\"\n            )\n\n    except jwt.InvalidTokenError:\n        raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid Token\"\n            )\n\ndef get_current_user(auth: HTTPAuthorizationCredentials = Security(security)):\n    credentials_error = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\"\n    )\n\n    payload = decode_token(auth.credentials)\n    if not payload:\n        raise credentials_error\n\n    return payload\n\ndef get_current_user_id(auth: HTTPAuthorizationCredentials = Security(security)):\n    payload = get_current_user(auth)\n    try:\n        return payload[\"user_id\"]\n    except KeyError:\n        return None\n\ndef get_current_user_role(auth: HTTPAuthorizationCredentials = Security(security)):\n    payload = get_current_user(auth)\n    try:\n        return payload[\"role\"]\n    except KeyError:\n        return None\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0420\u043e\u0443\u0442\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. </p> <p>\u0422\u0430\u043a\u0436\u0435, \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u0435\u0431\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f. \u0414\u043b\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438.</p> <p></p>"},{"location":"LR1/db/","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL 15, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435. \u0414\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f ORM \u0441\u0438\u0441\u0442\u0435\u043c\u0430 SQlModel. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Alembic.</p> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 db/db.py</p> db.py <pre><code>from sqlmodel import SQLModel, Session, create_engine\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv('app/.env')\n\ndb_url = os.getenv(\"POSTGRES_URL\")\nengine = create_engine(db_url, echo=True)\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p>\u0424\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0431\u0430\u0437\u0435.</p> <p>\u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u0441\u0435\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u044b \u0432 \u043a\u043e\u0434\u0435.</p>"},{"location":"LR1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u041c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 db/models.py</p> models.py <pre><code>from datetime import datetime\nfrom typing import Optional, List\nfrom enum import Enum\n\nfrom sqlmodel import SQLModel, Field, Relationship\n\nclass UserRole(Enum):\n    user = \"user\"\n    admin = \"admin\"\n    organizer = \"organizer\"\n\n// defalt models\n\nclass UserDefault(SQLModel):\n    username: str\n    password: str\n    email: str\n    phone: str\n    role: UserRole\n    description: str | None = None\n    avatar_url: str | None = None\n\nclass HackathonDefault(SQLModel):\n    organizer_id: int | None = Field(default=None, foreign_key=\"user.id\")\n    name: str\n    description: str\n    participant_conditions: Optional[str] = ''\n    location: str\n    start_date: datetime\n    end_date: datetime\n\nclass TeamDefault(SQLModel):\n    hackathon_id: int | None = Field(default=None, foreign_key=\"hackathon.id\")\n    name: str\n\nclass TaskDefault(SQLModel):\n    hackathon_id: int | None = Field(default=None, foreign_key=\"hackathon.id\") # hackid + taskid\n    name: str\n    description: str\n    technical_task: str\n    requirements: str | None = None\n    grading_criteria: str | None = None\n\nclass TeamTaskSolutionDefault(SQLModel):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    task_id: int | None = Field(default=None, foreign_key=\"task.id\") # make hack_id + task_id\n    review: str | None = None\n    grade: str | None = None\n    feedback: str | None = None\n\nclass SolutionFixDefault(SQLModel):\n    solution_id: int | None = Field(default=None, foreign_key=\"teamtasksolution.id\")\n    commentary: str | None = None\n    feedback: str | None = None\n\n// table models\n\nclass Teammate(SQLModel, table=True):\n    team_id: int = Field(foreign_key=\"team.id\", primary_key=True)\n    user_id: int = Field(foreign_key=\"user.id\", primary_key=True)\n\nclass User(UserDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hackathons_organized: List[\"Hackathon\"] | None = Relationship(back_populates=\"organizer\", cascade_delete=True)\n    teams: List[\"Team\"] | None = Relationship(back_populates=\"users\", link_model=Teammate)\n\nclass Hackathon(HackathonDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    organizer: \"User\" = Relationship(back_populates=\"hackathons_organized\")\n    teams: List[\"Team\"] | None = Relationship(back_populates=\"hackathon\", cascade_delete=True)\n    tasks: List[\"Task\"] | None = Relationship(back_populates=\"hackathon\", cascade_delete=True)\n\nclass Team(TeamDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hackathon: \"Hackathon\" = Relationship(back_populates=\"teams\")\n    users: List[\"User\"] | None = Relationship(back_populates=\"teams\", link_model=Teammate)\n    solutions: List[\"TeamTaskSolution\"] | None = Relationship(back_populates=\"team\", cascade_delete=True)\n\nclass Task(TaskDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hackathon: \"Hackathon\" = Relationship(back_populates=\"tasks\")\n    solutions: List[\"TeamTaskSolution\"] | None = Relationship(back_populates=\"task\", cascade_delete=True)\n\nclass TeamTaskSolution(TeamTaskSolutionDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    team: \"Team\" = Relationship(back_populates=\"solutions\")\n    task: \"Task\" = Relationship(back_populates=\"solutions\")\n    fixes: List[\"SolutionFix\"] = Relationship(back_populates=\"solution\", cascade_delete=True)\n\nclass SolutionFix(SolutionFixDefault, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    solution: \"TeamTaskSolution\" = Relationship(back_populates=\"fixes\")\n\n// response models\n\nclass UserResponse(UserDefault):\n    id: int | None = None\n\nclass HackathonResponse(HackathonDefault):\n    id: int | None = None\n    organizer: Optional[\"User\"] = None\n\nclass TeamResponse(TeamDefault):\n    id: int | None = None\n    hackathon: Optional[\"Hackathon\"] = None\n    users: Optional[List[\"User\"]] = None\n\nclass TaskResponse(TaskDefault):\n    id: int | None = None\n    hackathon: Optional[\"Hackathon\"] = None\n\nclass TeamTaskSolutionResponse(TeamTaskSolutionDefault):\n    id: int | None = None\n    team: Optional[\"Team\"] = None\n    task: Optional[\"Task\"] = None\n\nclass SolutionFixResponse(SolutionFixDefault):\n    id: int | None = None\n    solution: Optional[\"TeamTaskSolution\"] = None\n\n// auth models\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n\nclass UserUpdate(SQLModel):\n    phone: str\n    role: UserRole\n    description: str | None\n    avatar_url: str | None\n\n</code></pre>"},{"location":"LR1/models/#user","title":"User","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>username - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li>password - \u043f\u0430\u0440\u043e\u043b\u044c (\u0445\u0435\u0448) \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li>email - \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b</li> <li>phone - \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430</li> <li>role - \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 (user, organizer, admin)</li> <li>description - \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435</li> <li>avatar_url - url \u043d\u0430 \u0430\u0432\u0430\u0442\u0430\u0440\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> </ul>"},{"location":"LR1/models/#hackathon","title":"Hackathon","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>organizer_id - (FK) id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f-\u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430</li> <li>name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f</li> <li>description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f</li> <li>participant_conditions - \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f</li> <li>location - \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f</li> <li>start_date - \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430</li> <li>end_date - \u0434\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430</li> </ul>"},{"location":"LR1/models/#team","title":"Team","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>hackathon_id - (FK) id \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0430</li> <li>name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b</li> </ul>"},{"location":"LR1/models/#teammate","title":"Teammate","text":"<p>\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 Team \u0438 User, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>team_id (PK)(FK) - id \u043a\u043e\u043c\u0430\u043d\u0434\u044b</li> <li>user_id (PK)(FK) - id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> </ul>"},{"location":"LR1/models/#task","title":"Task","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>hackathon_id - (FK) id \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430</li> <li>name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f</li> <li>description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f</li> <li>technical_task - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0422\u0417 \u043a \u0437\u0430\u0434\u0430\u043d\u0438\u044e</li> <li>requirements - \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c</li> <li>grading_criteria - \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u043d\u0438\u044f</li> </ul>"},{"location":"LR1/models/#teamtasksolution","title":"TeamTaskSolution","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>team_id - (FK) id \u043a\u043e\u043c\u0430\u043d\u0434\u044b</li> <li>task_id - (FK) id \u0437\u0430\u0434\u0430\u043d\u0438\u044f</li> <li>review - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b</li> <li>grade - \u043e\u0446\u0435\u043d\u043a\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f</li> <li>feedback - \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e</li> </ul>"},{"location":"LR1/models/#solutionfix","title":"SolutionFix","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u044f:</p> <ul> <li>id - (PK) \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li>solution_id (FK) id \u0440\u0435\u0448\u0435\u043d\u0438\u044f</li> <li>commentary - \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e \u043f\u0440\u0430\u0432\u043a\u0435</li> <li>feedback - \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043f\u043e \u043f\u0440\u0430\u0432\u043a\u0435</li> </ul>"},{"location":"LR2/task1/","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u043d\u0430 CPU \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0435","text":""},{"location":"LR2/task1/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u0441\u0442\u0430 \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u043c\u0435\u0442\u043e\u0434 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 100.000.000. \u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u0437\u0430\u043c\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p> <p>\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 multiprocessing \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 asyncio.</p> <p>\u0421 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b \u0437\u0430\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0442\u043e\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0438 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b.</p> <pre><code>from threading import Thread\nfrom time import time\n\ndef get_part_sum(start, end, result, index):\n    result[index] = sum(range(start, end))\n\nif __name__ == '__main__':\n    n = 1_000_000_00\n    threads_num = 10\n    result = [0 for _ in range(threads_num)]\n    chunk_size = n // threads_num\n\n    threads = []\n    start_time = time()\n    for i in range(threads_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        t = Thread(target=get_part_sum, args=(start, end, result, i))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n</code></pre> <p>\u0421 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u043e\u043c \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0443\u043c\u043c\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0451. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c.</p> <pre><code>from multiprocessing import Pool\nfrom time import time\n\ndef get_part_sum(start, end):\n    return sum(range(start, end))\n\nif __name__ == '__main__':\n    n = 1_000_000_00\n    process_num = 10\n    chunk_size = n // process_num\n    p = Pool(process_num)\n\n    payloads = []\n    for i in range(process_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        payloads.append((start, end))\n\n    start_time = time()\n    result = p.starmap(get_part_sum, payloads)\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n</code></pre> <p>\u0421 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0445.</p> <pre><code>import asyncio\nfrom time import time\n\nasync def get_part_sum(start, end):\n    return sum(range(start, end))\n\nasync def main():\n    n = 1_000_000_00\n    tasks_num = 10\n    result = [0 for _ in range(tasks_num)]\n    chunk_size = n // tasks_num\n\n    tasks = []\n    for i in range(tasks_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        tasks.append(get_part_sum(start, end))\n    start_time = time()\n\n    result = await asyncio.gather(*tasks)\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"LR2/task1/#_2","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430.</p> single thread threading multiprocessing asyncio 6.503\u0441. 7.665\u0441. 3.016\u0441. 6.659\u0441. <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0432\u0443\u043c\u044f \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438. \u042d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443 \u043d\u0430\u0441 CPU-bound \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0430 \u043f\u043e\u0442\u043e\u043a\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442\u0441\u044f GIL \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e.</p>"},{"location":"LR2/task2/","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u043d\u0430 I/O \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0435","text":""},{"location":"LR2/task2/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</p> <pre><code>import requests\nimport random\nimport string\nimport aiohttp\nfrom models import *\nfrom db import get_session, get_async_session\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\n# \u043f\u0430\u0440\u0441\u0438\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b.\u0440\u0443\u0441\nHOST = \"https://feeds.tildacdn.com\"  # \u0441\u0430\u0439\u0442 \u0441\u0434\u0435\u043b\u0430\u043d \u043d\u0430 \u0442\u0438\u043b\u044c\u0434\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u0430\u043f\u0438 \u0442\u0438\u043b\u044c\u0434\u044b\nLIST_API_ENDPOINT = \"/api/getfeed/?feeduid=617755803461&amp;recid=488755787&amp;c={timestamp}&amp;size={size}&amp;slice={slice}\"\nSIZE = 20\nSLICE = 1\nUSER_AGENT = \"\".join(random.choices(string.ascii_letters, k=20))\nSESSION = requests.session()\nSESSION.headers[\"User-Agent\"] = USER_AGENT\n\ndef get_urls(size=SIZE, slice=SLICE):\n    now_timestamp = int(datetime.timestamp(datetime.now()) * 1000)\n    url = HOST + LIST_API_ENDPOINT.format(timestamp=now_timestamp, size=size, slice=slice)\n    hackathons_list = SESSION.get(url).json()[\"posts\"]\n    urls = [post[\"url\"] for post in hackathons_list if \"tpost\" in post[\"url\"]]\n    return urls\n\nasync def async_get_urls(size=SIZE, slice=SLICE):\n    session = aiohttp.ClientSession()\n    now_timestamp = int(datetime.timestamp(datetime.now()) * 1000)\n    url = HOST + LIST_API_ENDPOINT.format(timestamp=now_timestamp, size=size, slice=slice)\n    response = await session.get(url)\n    json_data = await response.json()\n    await session.close()\n    hackathons_list = json_data[\"posts\"]\n    urls = [post[\"url\"] for post in hackathons_list if \"tpost\" in post[\"url\"]]\n    return urls\n\ndef _fetch_data(url):\n    r = SESSION.get(url, headers={\"User-Agent\": USER_AGENT})\n    return r.text, r.status_code\n\nasync def _async_fetch_data(url):\n    timeout = aiohttp.ClientTimeout(10)\n    async with aiohttp.ClientSession(timeout=timeout) as session:\n        async with session.get(url, headers={\"User-Agent\": USER_AGENT}) as response:\n            response.raise_for_status()\n            return await response.text(), response.status\n\ndef _parse_html(data):\n    soup = BeautifulSoup(data, \"html.parser\")\n    dto = {\n        \"title\": None,\n        \"description\": None,\n        \"participant_conditions\": None,\n        \"location\": None,\n        \"dates\": None,\n        \"organizer_id\": 18  # \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u044e\u0437\u0435\u0440\n    }\n    dto[\"title\"] = soup.find(\"h1\", attrs={\"class\": \"js-feed-post-title t-feed__post-popup__title t-title t-title_xxs\"}).text.strip()\n    descr = soup.find(\"div\", attrs={\"class\": \"t-redactor__tte-view\"})\n    descr_blocks = descr.find_all(\"div\")\n    description = \"\"\n    for block in descr_blocks:\n        if \"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\" in block.text:\n            dto[\"dates\"] = block.text.split(\"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\")[1].split('\\n')[0].strip()\n        if \"\u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\" in block.text:\n            dto[\"location\"] = block.text.split(\"\u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f:\")[1].split('\\n')[0].strip()\n        if \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u043e\" in block.text:\n            break\n        description += block.text + '\\n'\n    dto[\"description\"] = description\n    if not dto[\"location\"]:\n        dto[\"location\"] = \"\u041e\u043d\u043b\u0430\u0439\u043d\"\n\n    return dto\n\ndef _load_in_db(dto):\n    session = next(get_session())\n    data = HackathonDefault(\n        name=dto[\"title\"],\n        description=dto[\"description\"],\n        participant_conditions=dto[\"participant_conditions\"],\n        location=dto[\"location\"],\n        dates=dto[\"dates\"],\n        organizer_id=dto[\"organizer_id\"]\n    )\n    model = Hackathon.model_validate(data)\n    session.add(model)\n    session.commit()\n    session.refresh(model)\n\ndef fetch_parse_load(url):\n    data, status = _fetch_data(url)\n    if status == 404:\n        return False\n    data = _parse_html(data)\n    _load_in_db(data)\n    return True\n\nasync def async_fetch_parse_load(url):\n    data, status = await _async_fetch_data(url)\n    if status == 404:\n        return False\n    data = _parse_html(data)\n    _load_in_db(data)\n    return True\n</code></pre> <p>C \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u0442\u0435\u0441\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432</p> <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c:</p> <pre><code>import threading\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 3\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    threads = []\n    start_time = time()\n\n    for url in urls:\n        # print(f\"{url} - loading...\")\n        t = threading.Thread(target=parse_and_load, args=(url,))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c:</p> <pre><code>from multiprocessing import Pool\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 4\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    p = Pool(10)\n    start_time = time()\n\n    p.map(parse_and_load, urls)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c</p> <pre><code>import asyncio\nfrom time import time\nfrom parser import async_get_urls, async_fetch_parse_load\n\nSIZE = 10\nSLICE = 5\n\nasync def parse_and_load(url):\n    if await async_fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\nasync def main():\n    urls = await async_get_urls(SIZE, SLICE)\n    tasks = []\n    start_time = time()\n\n    for url in urls:\n        tasks.append(parse_and_load(url))\n\n    await asyncio.gather(*tasks, return_exceptions=True)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n</code></pre> <p>\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a:</p> <pre><code>import threading\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 6\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    start_time = time()\n\n    for url in urls:\n        parse_and_load(url)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>"},{"location":"LR2/task2/#_2","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432</p> single thread threading multiprocessing async 3.416c. 1.163\u0441. 11.712\u0441. 1.405\u0441. <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438 I/O-bound \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438. \u0412 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0438\u0437-\u0437\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0432\u044b\u0439\u0433\u0440\u044b\u0448\u0430 \u043f\u0440\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445.</p>"},{"location":"LR3/task1/","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker","text":""},{"location":"LR3/task1/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0434\u043e \u044d\u0442\u043e\u0433\u043e).</li> <li>\u0412\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 2 Dockerfile-\u0430 \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430\u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b.</li> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c docker-compose \u0434\u043b\u044f \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> </ol>"},{"location":"LR3/task1/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0411\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u041a\u043e\u0434 \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p> <pre><code>app = FastAPI()\n\n@app.post(\"/parse\")\nasync def parse(size: int=10, slice: int=1):\n    urls = await async_get_urls(size, slice)\n    tasks = []\n\n    for url in urls:\n        tasks.append(async_fetch_parse_load(url))\n\n    await asyncio.gather(*tasks, return_exceptions=True)\n    return {\"ok\": True}\n</code></pre> <p>\u0421\u0432\u0430\u0433\u0433\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <p></p> <p>\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b:</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435</p> <pre><code>FROM python:3.12-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY app ./app\nCOPY migrations .\nCOPY alembic.ini .\n\nEXPOSE 9000\n\nCMD [\"fastapi\", \"run\", \"app/app.py\", \"--port\", \"9000\"]\n</code></pre> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430:</p> <pre><code>FROM python:3.12-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nEXPOSE 9001\n\nCMD [\"fastapi\", \"run\", \"app.py\", \"--port\", \"9000\"]\n</code></pre> <p>\u041b\u043e\u0433\u0438\u043a\u0430 Dockerfile \u043f\u0440\u043e\u0441\u0442\u0430\u044f - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0444\u0430\u0439\u043b\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0435\u0433\u043e.</p> <p>\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 docker-compose</p> <pre><code>services:\n  web-db:\n    container_name: web-db\n    image: postgres:15\n    restart: always\n    shm_size: 128mb\n    env_file:\n      - \"app/.env\"\n    ports:\n      - 25432:5432\n    volumes:\n      - pgdata:/var/lib/postgresql@15/data \n\n  main-app:\n    container_name: main-app\n    build: .\n    restart: always\n    depends_on:\n      - web-db\n    pids_limit: 500\n    mem_limit: 1G\n    cpus: 2\n    ports:\n      - 9000:9000\n\n  parser-app:\n    container_name: parser-app\n    build: ./lr2\n    restart: always\n    depends_on:\n      - web-db\n      - redis-broker\n    pids_limit: 500\n    mem_limit: 1G\n    cpus: 2\n    ports:\n      - 9001:9000\n\nvolumes:\n  pgdata:\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0438\u0434\u0435\u043c \u0432 docker desktop 3 \u0436\u0438\u0432\u044b\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0438 \u043e\u043d\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441 localhost-\u0430.</p> <p></p> <p></p>"},{"location":"LR3/task2/","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":""},{"location":"LR3/task2/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p>"},{"location":"LR3/task2/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0442\u043e\u0436\u0435 FastAPI, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043d\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e http \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 requests \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u0430\u0440\u0441\u0435\u0440\u0430.</p> <p>\u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code>@app.post(\"/parse_url\")\ndef parse_url(url: str):\n    session = requests.Session()\n    try:\n        r = session.post(\"http://parser-app:9000/parse_url\",\n                         params={\"url\": url})\n    except requests.exceptions.ConnectionError:\n        return {\"detail\": \"connection error\"}\n\n    if r.ok:\n        return r.json()\n    else:\n        return {\"ok\": False}\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0438\u0434\u0451\u0442 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 - \u0445\u043e\u0441\u0442 \u0432\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0435\u0442\u0438 \u0434\u043e\u043a\u0435\u0440\u0430, \u0438 \u043f\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c\u0443 \u043f\u043e\u0440\u0442\u0443.</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430:</p> <p></p> <p></p>"},{"location":"LR3/task3/","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":""},{"location":"LR3/task3/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Celery \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p>"},{"location":"LR3/task3/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0411\u044b\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c celery.</p> <pre><code>pip install celery[redis]\n</code></pre> <p>\u0420\u044f\u0434\u043e\u043c \u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d celery worker, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b. Redis \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p> <pre><code>from celery import Celery\nfrom dotenv import load_dotenv\nfrom task2.parser import async_fetch_parse_load\nimport asyncio\nimport os\n\nload_dotenv(\"app/.env\")\n\nredis_url = os.getenv(\"REDIS_URL\", \"redis://localhost:6379/0\")\ncelery_app = Celery(\"worker\", backend=redis_url, broker=redis_url)\n\n@celery_app.task\ndef parse_url(url: str):\n    return asyncio.run(async_fetch_parse_load(url))\n\ncelery_app.conf.task_routes = {\n    \"worker.parse_url\": {\"queue\": \"default\"},\n}\n</code></pre> <p>\u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043e\u0434\u043d\u043e\u0433\u043e url-\u0430, \u043f\u0430\u0447\u043a\u0438 url-\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f \u0441 \u0441\u0430\u0439\u0442\u0430 (\u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e \u0434\u043e \u044d\u0442\u043e\u0433\u043e, \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c \u043f\u0430\u0440\u0441\u0435\u0440 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 celery, \u0430 \u043d\u0435 \u0440\u0443\u0447\u043a\u0430\u043c\u0438), \u0430 \u0442\u0430\u043a\u0436\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <pre><code>@app.post(\"/parse_celery\")\nasync def parse_celery(size: int=10, slice: int=1):\n    urls = await async_get_urls(size, slice)\n    ids = []\n    for url in urls:\n        task = parse_url.delay(url)\n        ids.append(task.id)\n    return {\"id\": ids}\n\n@app.post(\"/parse_url\")\nasync def parse_celery_single_url(url: str):\n    task = parse_url.delay(url)\n    return {\"id\": task.id}\n\n@app.get(\"/task/{task_id}\")\nasync def get_task_status(task_id: str):\n    res = celery_app.AsyncResult(task_id)\n    if res.state == \"FAILURE\":\n        raise HTTPException(500, detail=str(res.result))\n    return {\"state\": res.state}\n</code></pre> <p>\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0432\u044b\u0437\u043e\u0432 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e url-\u0430 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <pre><code>@app.post(\"/parse_url\")\ndef parse_url(url: str):\n    session = requests.Session()\n    try:\n        r = session.post(\"http://parser-app:9000/parse_url\",\n                         params={\"url\": url})\n    except requests.exceptions.ConnectionError:\n        return {\"detail\": \"connection error\"}\n\n    if r.ok:\n        return r.json()\n    else:\n        return {\"ok\": False}\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0434\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u043e\u043c\u043f\u043e\u0437 2 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 - redis \u0438 \u043d\u0430\u0448 celery worker.</p> <pre><code>    redis-broker:\n        container_name: redis-broker\n        image: redis:8\n        ports:\n        - 6379:6379\n\n  parser-app:\n    container_name: parser-app\n    build: ./lr2\n    restart: always\n    depends_on:\n      - web-db\n      - redis-broker\n    pids_limit: 500\n    mem_limit: 1G\n    cpus: 2\n    ports:\n      - 9001:9000\n    command: \"fastapi run app.py --port 9000\"\n\n  celery-worker:\n    container_name: celery-worker\n    build: ./lr2\n    restart: always\n    depends_on:\n      - parser-app\n    command: celery -A worker.worker worker --loglevel=info\n</code></pre> <p>\u0420\u0435\u0434\u0438\u0441 \u0431\u0438\u043b\u0434\u0438\u0442\u0441\u044f \u0438\u0437 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u0430 \u0441 \u0440\u0435\u0435\u0441\u0442\u0440\u0430. Celery \u0432\u043e\u0440\u043a\u0435\u0440 \u0431\u0438\u043b\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043c \u0436\u0435 Dockerfile, \u0447\u0442\u043e \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043d\u043e \u0438\u0437 \u043d\u0435\u0433\u043e \u0431\u044b\u043b \u0443\u0431\u0440\u0430\u043d \u0432\u044b\u0437\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b fastapi. \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043c\u043f\u043e\u0437\u0435.</p> <p>\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u0434\u043d\u044f\u0442\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b:</p> <p></p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443:</p> <p></p> <p></p> <p></p> <p></p>"}]}